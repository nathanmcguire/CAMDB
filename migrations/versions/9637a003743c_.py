from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '9637a003743c'
down_revision = 'fa218871b9e9'
branch_labels = None
depends_on = None


def upgrade():
    # Ensure that existing rows don't have NULL values in 'created' or 'updated'
    op.execute("UPDATE assets SET created = strftime('%s', 'now') WHERE created IS NULL")
    op.execute("UPDATE assets SET updated = strftime('%s', 'now') WHERE updated IS NULL")

    # Now, apply schema changes
    with op.batch_alter_table('assets', schema=None) as batch_op:
        # Add 'archived' column (nullable)
        batch_op.add_column(sa.Column('archived', sa.DateTime(), nullable=True))

        # Alter 'created' and 'updated' columns to be NOT NULL
        batch_op.alter_column('created',
               existing_type=sa.DATETIME(),
               nullable=False)
        batch_op.alter_column('updated',
               existing_type=sa.DATETIME(),
               nullable=False)

        # Drop 'deleted' column
        batch_op.drop_column('deleted')


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('assets', schema=None) as batch_op:
        # Add 'deleted' column back (nullable)
        batch_op.add_column(sa.Column('deleted', sa.DATETIME(), nullable=True))

        # Alter 'updated' and 'created' columns to be nullable again
        batch_op.alter_column('updated',
               existing_type=sa.DATETIME(),
               nullable=True)
        batch_op.alter_column('created',
               existing_type=sa.DATETIME(),
               nullable=True)

        # Drop 'archived' column
        batch_op.drop_column('archived')
